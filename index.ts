// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AndroidAppCredentialsArgs, AndroidAppCredentialsState } from "./androidAppCredentials";
export type AndroidAppCredentials = import("./androidAppCredentials").AndroidAppCredentials;
export const AndroidAppCredentials: typeof import("./androidAppCredentials").AndroidAppCredentials = null as any;
utilities.lazyLoad(exports, ["AndroidAppCredentials"], () => require("./androidAppCredentials"));

export { AppArgs, AppState } from "./app";
export type App = import("./app").App;
export const App: typeof import("./app").App = null as any;
utilities.lazyLoad(exports, ["App"], () => require("./app"));

export { AppVariableArgs, AppVariableState } from "./appVariable";
export type AppVariable = import("./appVariable").AppVariable;
export const AppVariable: typeof import("./appVariable").AppVariable = null as any;
utilities.lazyLoad(exports, ["AppVariable"], () => require("./appVariable"));

export { GetAppStoreApiKeyArgs, GetAppStoreApiKeyResult, GetAppStoreApiKeyOutputArgs } from "./getAppStoreApiKey";
export const getAppStoreApiKey: typeof import("./getAppStoreApiKey").getAppStoreApiKey = null as any;
export const getAppStoreApiKeyOutput: typeof import("./getAppStoreApiKey").getAppStoreApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getAppStoreApiKey","getAppStoreApiKeyOutput"], () => require("./getAppStoreApiKey"));

export { GetGoogleServiceAccountKeyArgs, GetGoogleServiceAccountKeyResult, GetGoogleServiceAccountKeyOutputArgs } from "./getGoogleServiceAccountKey";
export const getGoogleServiceAccountKey: typeof import("./getGoogleServiceAccountKey").getGoogleServiceAccountKey = null as any;
export const getGoogleServiceAccountKeyOutput: typeof import("./getGoogleServiceAccountKey").getGoogleServiceAccountKeyOutput = null as any;
utilities.lazyLoad(exports, ["getGoogleServiceAccountKey","getGoogleServiceAccountKeyOutput"], () => require("./getGoogleServiceAccountKey"));

export { GetIosCertificateArgs, GetIosCertificateResult, GetIosCertificateOutputArgs } from "./getIosCertificate";
export const getIosCertificate: typeof import("./getIosCertificate").getIosCertificate = null as any;
export const getIosCertificateOutput: typeof import("./getIosCertificate").getIosCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getIosCertificate","getIosCertificateOutput"], () => require("./getIosCertificate"));

export { GetIosPushKeyArgs, GetIosPushKeyResult, GetIosPushKeyOutputArgs } from "./getIosPushKey";
export const getIosPushKey: typeof import("./getIosPushKey").getIosPushKey = null as any;
export const getIosPushKeyOutput: typeof import("./getIosPushKey").getIosPushKeyOutput = null as any;
utilities.lazyLoad(exports, ["getIosPushKey","getIosPushKeyOutput"], () => require("./getIosPushKey"));

export { IosAppCredentialsArgs, IosAppCredentialsState } from "./iosAppCredentials";
export type IosAppCredentials = import("./iosAppCredentials").IosAppCredentials;
export const IosAppCredentials: typeof import("./iosAppCredentials").IosAppCredentials = null as any;
utilities.lazyLoad(exports, ["IosAppCredentials"], () => require("./iosAppCredentials"));

export { IosAppIdentifierArgs, IosAppIdentifierState } from "./iosAppIdentifier";
export type IosAppIdentifier = import("./iosAppIdentifier").IosAppIdentifier;
export const IosAppIdentifier: typeof import("./iosAppIdentifier").IosAppIdentifier = null as any;
utilities.lazyLoad(exports, ["IosAppIdentifier"], () => require("./iosAppIdentifier"));

export { IosAppProvisioningProfileArgs, IosAppProvisioningProfileState } from "./iosAppProvisioningProfile";
export type IosAppProvisioningProfile = import("./iosAppProvisioningProfile").IosAppProvisioningProfile;
export const IosAppProvisioningProfile: typeof import("./iosAppProvisioningProfile").IosAppProvisioningProfile = null as any;
utilities.lazyLoad(exports, ["IosAppProvisioningProfile"], () => require("./iosAppProvisioningProfile"));

export * from "./provider";
import { Provider } from "./provider";


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "eas:index/androidAppCredentials:AndroidAppCredentials":
                return new AndroidAppCredentials(name, <any>undefined, { urn })
            case "eas:index/app:App":
                return new App(name, <any>undefined, { urn })
            case "eas:index/appVariable:AppVariable":
                return new AppVariable(name, <any>undefined, { urn })
            case "eas:index/iosAppCredentials:IosAppCredentials":
                return new IosAppCredentials(name, <any>undefined, { urn })
            case "eas:index/iosAppIdentifier:IosAppIdentifier":
                return new IosAppIdentifier(name, <any>undefined, { urn })
            case "eas:index/iosAppProvisioningProfile:IosAppProvisioningProfile":
                return new IosAppProvisioningProfile(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("eas", "index/androidAppCredentials", _module)
pulumi.runtime.registerResourceModule("eas", "index/app", _module)
pulumi.runtime.registerResourceModule("eas", "index/appVariable", _module)
pulumi.runtime.registerResourceModule("eas", "index/iosAppCredentials", _module)
pulumi.runtime.registerResourceModule("eas", "index/iosAppIdentifier", _module)
pulumi.runtime.registerResourceModule("eas", "index/iosAppProvisioningProfile", _module)
pulumi.runtime.registerResourcePackage("eas", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:eas") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
