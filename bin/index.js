"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = exports.IosAppProvisioningProfile = exports.IosAppIdentifier = exports.IosAppCredentials = exports.getIosPushKeyOutput = exports.getIosPushKey = exports.getIosCertificateOutput = exports.getIosCertificate = exports.getGoogleServiceAccountKeyOutput = exports.getGoogleServiceAccountKey = exports.getAppStoreApiKeyOutput = exports.getAppStoreApiKey = exports.AppVariable = exports.App = exports.AndroidAppCredentials = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.AndroidAppCredentials = null;
utilities.lazyLoad(exports, ["AndroidAppCredentials"], () => require("./androidAppCredentials"));
exports.App = null;
utilities.lazyLoad(exports, ["App"], () => require("./app"));
exports.AppVariable = null;
utilities.lazyLoad(exports, ["AppVariable"], () => require("./appVariable"));
exports.getAppStoreApiKey = null;
exports.getAppStoreApiKeyOutput = null;
utilities.lazyLoad(exports, ["getAppStoreApiKey", "getAppStoreApiKeyOutput"], () => require("./getAppStoreApiKey"));
exports.getGoogleServiceAccountKey = null;
exports.getGoogleServiceAccountKeyOutput = null;
utilities.lazyLoad(exports, ["getGoogleServiceAccountKey", "getGoogleServiceAccountKeyOutput"], () => require("./getGoogleServiceAccountKey"));
exports.getIosCertificate = null;
exports.getIosCertificateOutput = null;
utilities.lazyLoad(exports, ["getIosCertificate", "getIosCertificateOutput"], () => require("./getIosCertificate"));
exports.getIosPushKey = null;
exports.getIosPushKeyOutput = null;
utilities.lazyLoad(exports, ["getIosPushKey", "getIosPushKeyOutput"], () => require("./getIosPushKey"));
exports.IosAppCredentials = null;
utilities.lazyLoad(exports, ["IosAppCredentials"], () => require("./iosAppCredentials"));
exports.IosAppIdentifier = null;
utilities.lazyLoad(exports, ["IosAppIdentifier"], () => require("./iosAppIdentifier"));
exports.IosAppProvisioningProfile = null;
utilities.lazyLoad(exports, ["IosAppProvisioningProfile"], () => require("./iosAppProvisioningProfile"));
__exportStar(require("./provider"), exports);
const provider_1 = require("./provider");
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "eas:index/androidAppCredentials:AndroidAppCredentials":
                return new exports.AndroidAppCredentials(name, undefined, { urn });
            case "eas:index/app:App":
                return new exports.App(name, undefined, { urn });
            case "eas:index/appVariable:AppVariable":
                return new exports.AppVariable(name, undefined, { urn });
            case "eas:index/iosAppCredentials:IosAppCredentials":
                return new exports.IosAppCredentials(name, undefined, { urn });
            case "eas:index/iosAppIdentifier:IosAppIdentifier":
                return new exports.IosAppIdentifier(name, undefined, { urn });
            case "eas:index/iosAppProvisioningProfile:IosAppProvisioningProfile":
                return new exports.IosAppProvisioningProfile(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("eas", "index/androidAppCredentials", _module);
pulumi.runtime.registerResourceModule("eas", "index/app", _module);
pulumi.runtime.registerResourceModule("eas", "index/appVariable", _module);
pulumi.runtime.registerResourceModule("eas", "index/iosAppCredentials", _module);
pulumi.runtime.registerResourceModule("eas", "index/iosAppIdentifier", _module);
pulumi.runtime.registerResourceModule("eas", "index/iosAppProvisioningProfile", _module);
pulumi.runtime.registerResourcePackage("eas", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:eas") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map